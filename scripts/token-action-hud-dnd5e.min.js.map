{"version":3,"file":"token-action-hud-dnd5e.min.js","sources":["constants.js","defaults.js","roll-handler.js","magic-items-extender.js","utils.js","action-handler.js","settings.js","system-manager.js","init.js"],"sourcesContent":["/**\r\n * Module-based constants\r\n */\r\nexport const MODULE = {\r\n  ID: \"token-action-hud-dnd5e\"\r\n};\r\n\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Core module\r\n */\r\nexport const CORE_MODULE = {\r\n  ID: \"token-action-hud-core\"\r\n};\r\n\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Core module version required by the system module\r\n */\r\nexport const REQUIRED_CORE_MODULE_VERSION = \"2.0\";\r\n\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Action type\r\n */\r\nexport const ACTION_TYPE = {\r\n  ability: \"DND5E.Ability\",\r\n  check: \"tokenActionHud.dnd5e.check\",\r\n  condition: \"tokenActionHud.dnd5e.condition\",\r\n  counter: \"tokenActionHud.dnd5e.counter\",\r\n  effect: \"DND5E.Effect\",\r\n  exhaustion: \"DND5E.Exhaustion\",\r\n  feature: \"TYPES.Item.feat\",\r\n  item: \"tokenActionHud.dnd5e.item\",\r\n  save: \"DND5E.SAVE.Title.one\",\r\n  skill: \"tokenActionHud.dnd5e.skill\",\r\n  spell: \"TYPES.Item.spell\",\r\n  utility: \"DND5E.ActionUtil\"\r\n};\r\n\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Activation types\r\n */\r\nexport const ACTIVATION_TYPE = {\r\n  action: { group: \"actions\" },\r\n  bonus: { group: \"bonus-actions\", icon: \"fas fa-plus\" },\r\n  crew: { group: \"crew-actions\", icon: \"fas fa-users\" },\r\n  day: { icon: \"fas fa-hourglass-end\" },\r\n  hour: { icon: \"fas fa-hourglass-half\" },\r\n  lair: { group: \"lair-actions\", icon: \"fas fa-home\" },\r\n  minute: { icon: \"fas fa-hourglass-start\" },\r\n  legendary: { group: \"legendary-actions\", icon: \"fas fas fa-dragon\" },\r\n  reaction: { group: \"reactions\", icon: \"fas fa-bolt\" },\r\n  reactiondamage: { group: \"reactions\", icon: \"fas fa-bolt\" },\r\n  reactionmanual: { group: \"reactions\", icon: \"fas fa-bolt\" },\r\n  special: { group: \"special-actions\", icon: \"fas fa-star\" },\r\n  other: { group: \"other-actions\" }\r\n};\r\n\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Concentration icon\r\n */\r\nexport const CONCENTRATION_ICON = \"systems/dnd5e/icons/svg/statuses/concentrating.svg\";\r\n\r\n/* -------------------------------------------- */\r\n\r\nexport const CUSTOM_DND5E = {\r\n  ID: \"custom-dnd5e\",\r\n  COUNTERS: {\r\n    character: \"character-counters\",\r\n    group: \"group-counters\",\r\n    npc: \"npc-counters\"\r\n  }\r\n};\r\n\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Feature Group IDs\r\n */\r\nexport const FEATURE_GROUP_IDS = [\r\n  \"activeFeatures\",\r\n  \"passiveFeatures\",\r\n  \"backgroundFeatures\",\r\n  \"classFeatures\",\r\n  \"feats\",\r\n  \"monsterFeatures\",\r\n  \"raceFeatures\",\r\n  \"artificerInfusions\",\r\n  \"channelDivinity\",\r\n  \"defensiveTactics\",\r\n  \"eldritchInvocations\",\r\n  \"elementalDisciplines\",\r\n  \"fightingStyles\",\r\n  \"huntersPrey\",\r\n  \"kiAbilities\",\r\n  \"maneuvers\",\r\n  \"metamagicOptions\",\r\n  \"multiattacks\",\r\n  \"pactBoons\",\r\n  \"psionicPowers\",\r\n  \"runes\",\r\n  \"superiorHuntersDefense\"\r\n];\r\n\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Groups\r\n */\r\nexport const GROUP = {\r\n  _1stLevelSpells: { id: \"1st-level-spells\", name: \"tokenActionHud.dnd5e.1stLevelSpells\", spellMode: 1, type: \"system\" },\r\n  _2ndLevelSpells: { id: \"2nd-level-spells\", name: \"tokenActionHud.dnd5e.2ndLevelSpells\", spellMode: 2, type: \"system\" },\r\n  _3rdLevelSpells: { id: \"3rd-level-spells\", name: \"tokenActionHud.dnd5e.3rdLevelSpells\", spellMode: 3, type: \"system\" },\r\n  _4thLevelSpells: { id: \"4th-level-spells\", name: \"tokenActionHud.dnd5e.4thLevelSpells\", spellMode: 4, type: \"system\" },\r\n  _5thLevelSpells: { id: \"5th-level-spells\", name: \"tokenActionHud.dnd5e.5thLevelSpells\", spellMode: 5, type: \"system\" },\r\n  _6thLevelSpells: { id: \"6th-level-spells\", name: \"tokenActionHud.dnd5e.6thLevelSpells\", spellMode: 6, type: \"system\" },\r\n  _7thLevelSpells: { id: \"7th-level-spells\", name: \"tokenActionHud.dnd5e.7thLevelSpells\", spellMode: 7, type: \"system\" },\r\n  _8thLevelSpells: { id: \"8th-level-spells\", name: \"tokenActionHud.dnd5e.8thLevelSpells\", spellMode: 8, type: \"system\" },\r\n  _9thLevelSpells: { id: \"9th-level-spells\", name: \"tokenActionHud.dnd5e.9thLevelSpells\", spellMode: 9, type: \"system\" },\r\n  abilities: { id: \"abilities\", name: \"tokenActionHud.dnd5e.abilities\", type: \"system\" },\r\n  actions: { id: \"actions\", name: \"DND5E.ActionPl\", type: \"system\" },\r\n  activeFeatures: { id: \"active-features\", name: \"tokenActionHud.dnd5e.activeFeatures\", type: \"system\" },\r\n  additionalSpells: { id: \"additional-spells\", name: \"DND5E.CAST.SECTIONS.Spellbook\", type: \"system\" },\r\n  artificerInfusions: { id: \"artificer-infusions\", name: \"tokenActionHud.dnd5e.artificerInfusions\", type: \"system\" },\r\n  atWillSpells: { id: \"at-will-spells\", name: \"tokenActionHud.dnd5e.atWillSpells\", spellMode: \"atwill\", type: \"system\" },\r\n  backgroundFeatures: { id: \"background-features\", name: \"tokenActionHud.dnd5e.backgroundFeatures\", type: \"system\" },\r\n  bonusActions: { id: \"bonus-actions\", name: \"tokenActionHud.dnd5e.bonusActions\", type: \"system\" },\r\n  cantrips: { id: \"cantrips\", name: \"tokenActionHud.dnd5e.cantrips\", spellMode: 0, type: \"system\" },\r\n  channelDivinity: { id: \"channel-divinity\", name: \"tokenActionHud.dnd5e.channelDivinity\", type: \"system\" },\r\n  checks: { id: \"checks\", name: \"tokenActionHud.dnd5e.checks\", type: \"system\" },\r\n  classFeatures: { id: \"class-features\", name: \"tokenActionHud.dnd5e.classFeatures\", type: \"system\" },\r\n  combat: { id: \"combat\", name: \"tokenActionHud.combat\", type: \"system\" },\r\n  conditions: { id: \"conditions\", name: \"tokenActionHud.dnd5e.conditions\", type: \"system\" },\r\n  consumables: { id: \"consumables\", name: \"TYPES.Item.consumablePl\", type: \"system\" },\r\n  containers: { id: \"containers\", name: \"TYPES.Item.containerPl\", type: \"system\" },\r\n  counters: { id: \"counters\", name: \"tokenActionHud.dnd5e.counters\", type: \"system\" },\r\n  crewActions: { id: \"crew-actions\", name: \"tokenActionHud.dnd5e.crewActions\", type: \"system\" },\r\n  defensiveTactics: { id: \"defensive-tactics\", name: \"tokenActionHud.dnd5e.defensiveTactics\", type: \"system\" },\r\n  eldritchInvocations: { id: \"eldritch-invocations\", name: \"tokenActionHud.dnd5e.eldritchInvocations\", type: \"system\" },\r\n  elementalDisciplines: { id: \"elemental-disciplines\", name: \"tokenActionHud.dnd5e.elementalDisciplines\", type: \"system\" },\r\n  equipment: { id: \"equipment\", name: \"TYPES.Item.equipmentPl\", type: \"system\" },\r\n  equipped: { id: \"equipped\", name: \"DND5E.Equipped\", type: \"system\" },\r\n  exhaustion: { id: \"exhaustion\", name: \"DND5E.Exhaustion\", type: \"system\" },\r\n  feats: { id: \"feats\", name: \"tokenActionHud.dnd5e.feats\", type: \"system\" },\r\n  fightingStyles: { id: \"fighting-styles\", name: \"tokenActionHud.dnd5e.fightingStyles\", type: \"system\" },\r\n  huntersPrey: { id: \"hunters-prey\", name: \"tokenActionHud.dnd5e.huntersPrey\", type: \"system\" },\r\n  innateSpells: { id: \"innate-spells\", name: \"tokenActionHud.dnd5e.innateSpells\", spellMode: \"innate\", type: \"system\" },\r\n  kiAbilities: { id: \"ki-abilities\", name: \"tokenActionHud.dnd5e.kiAbilities\", type: \"system\" },\r\n  lairActions: { id: \"lair-actions\", name: \"tokenActionHud.dnd5e.lairActions\", type: \"system\" },\r\n  legendaryActions: { id: \"legendary-actions\", name: \"tokenActionHud.dnd5e.legendaryActions\", type: \"system\" },\r\n  loot: { id: \"loot\", name: \"TYPES.Item.lootPl\", type: \"system\" },\r\n  maneuvers: { id: \"maneuvers\", name: \"tokenActionHud.dnd5e.maneuvers\", type: \"system\" },\r\n  metamagicOptions: { id: \"metamagic-options\", name: \"tokenActionHud.dnd5e.metamagicOptions\", type: \"system\" },\r\n  monsterFeatures: { id: \"monster-features\", name: \"tokenActionHud.dnd5e.monsterFeatures\", type: \"system\" },\r\n  multiattacks: { id: \"multiattacks\", name: \"tokenActionHud.dnd5e.multiattacks\", type: \"system\" },\r\n  otherActions: { id: \"other-actions\", name: \"tokenActionHud.dnd5e.otherActions\", type: \"system\" },\r\n  pactBoons: { id: \"pact-boons\", name: \"tokenActionHud.dnd5e.pactBoons\", type: \"system\" },\r\n  pactSpells: { id: \"pact-spells\", name: \"tokenActionHud.dnd5e.pactSpells\", spellMode: \"pact\", type: \"system\" },\r\n  passiveEffects: { id: \"passive-effects\", name: \"DND5E.EffectPassive\", type: \"system\" },\r\n  passiveFeatures: { id: \"passive-features\", name: \"tokenActionHud.dnd5e.passiveFeatures\", type: \"system\" },\r\n  psionicPowers: { id: \"psionic-powers\", name: \"tokenActionHud.dnd5e.psionicPowers\", type: \"system\" },\r\n  raceFeatures: { id: \"race-features\", name: \"tokenActionHud.dnd5e.raceFeatures\", type: \"system\" },\r\n  reactions: { id: \"reactions\", name: \"DND5E.ReactionPl\", type: \"system\" },\r\n  rests: { id: \"rests\", name: \"tokenActionHud.dnd5e.rests\", type: \"system\" },\r\n  runes: { id: \"runes\", name: \"tokenActionHud.dnd5e.runes\", type: \"system\" },\r\n  saves: { id: \"saves\", name: \"DND5E.ClassSaves\", type: \"system\" },\r\n  skills: { id: \"skills\", name: \"tokenActionHud.dnd5e.skills\", type: \"system\" },\r\n  superiorHuntersDefense: { id: \"superior-hunters-defense\", name: \"tokenActionHud.dnd5e.superiorHuntersDefense\", type: \"system\" },\r\n  temporaryEffects: { id: \"temporary-effects\", name: \"DND5E.EffectTemporary\", type: \"system\" },\r\n  token: { id: \"token\", name: \"tokenActionHud.token\", type: \"system\" },\r\n  tools: { id: \"tools\", name: \"TYPES.Item.toolPl\", type: \"system\" },\r\n  unequipped: { id: \"unequipped\", name: \"DND5E.Unequipped\", type: \"system\" },\r\n  utility: { id: \"utility\", name: \"tokenActionHud.utility\", type: \"system\" },\r\n  weapons: { id: \"weapons\", name: \"TYPES.Item.weaponPl\", type: \"system\" }\r\n};\r\n\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Prepared icon\r\n */\r\nexport const PREPARED_ICON = \"fas fa-sun\";\r\n\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Proficiency level icons\r\n */\r\nexport const PROFICIENCY_LEVEL_ICON = {\r\n  0: \"fa-regular fa-circle\",\r\n  0.5: \"fa-regular fa-circle-half-stroke\",\r\n  1: \"fa-solid fa-circle\",\r\n  2: \"fa-regular fa-circle-dot\"\r\n};\r\n\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Rarity\r\n */\r\nexport const RARITY = {\r\n  common: \"tokenActionHud.dnd5e.common\",\r\n  uncommon: \"tokenActionHud.dnd5e.uncommon\",\r\n  rare: \"tokenActionHud.dnd5e.rare\",\r\n  veryRare: \"tokenActionHud.dnd5e.veryRare\",\r\n  legendary: \"tokenActionHud.dnd5e.legendary\",\r\n  artifact: \"tokenActionHud.dnd5e.artifact\"\r\n};\r\n\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Ritual icon\r\n */\r\nexport const RITUAL_ICON = \"fas fa-circle-r\";\r\n\r\n/* -------------------------------------------- */\r\n\r\n/**\r\n * Spell Group IDs\r\n */\r\nexport const SPELL_GROUP_IDS = [\r\n  \"cantrips\",\r\n  \"_1stLevelSpells\",\r\n  \"_2ndLevelSpells\",\r\n  \"_3rdLevelSpells\",\r\n  \"_4thLevelSpells\",\r\n  \"_5thLevelSpells\",\r\n  \"_6thLevelSpells\",\r\n  \"_7thLevelSpells\",\r\n  \"_8thLevelSpells\",\r\n  \"_9thLevelSpells\",\r\n  \"atWillSpells\",\r\n  \"innateSpells\",\r\n  \"pactSpells\",\r\n  \"additionalSpells\"\r\n];\r\n","import { GROUP } from \"./constants.js\";\r\n\r\n/**\r\n * Default categories and groups\r\n */\r\nexport let DEFAULTS = null;\r\n\r\nHooks.once(\"tokenActionHudCoreApiReady\", async coreModule => {\r\n  const groups = GROUP;\r\n  Object.values(groups).forEach(group => {\r\n    group.name = coreModule.api.Utils.i18n(group.name);\r\n    group.listName = `Group: ${coreModule.api.Utils.i18n(group.name)}`;\r\n  });\r\n  const groupsArray = Object.values(groups);\r\n  DEFAULTS = {\r\n    layout: [\r\n      {\r\n        nestId: \"inventory\",\r\n        id: \"inventory\",\r\n        name: coreModule.api.Utils.i18n(\"DND5E.Inventory\"),\r\n        groups: [\r\n          { ...groups.weapons, nestId: \"inventory_weapons\" },\r\n          { ...groups.equipment, nestId: \"inventory_equipment\" },\r\n          { ...groups.consumables, nestId: \"inventory_consumables\" },\r\n          { ...groups.tools, nestId: \"inventory_tools\" },\r\n          { ...groups.containers, nestId: \"inventory_containers\" },\r\n          { ...groups.loot, nestId: \"inventory_loot\" }\r\n        ]\r\n      },\r\n      {\r\n        nestId: \"features\",\r\n        id: \"features\",\r\n        name: coreModule.api.Utils.i18n(\"DND5E.Features\"),\r\n        groups: [\r\n          { ...groups.activeFeatures, nestId: \"features_active-features\" },\r\n          { ...groups.passiveFeatures, nestId: \"features_passive-features\" }\r\n        ]\r\n      },\r\n      {\r\n        nestId: \"spells\",\r\n        id: \"spells\",\r\n        name: coreModule.api.Utils.i18n(\"TYPES.Item.spellPl\"),\r\n        groups: [\r\n          { ...groups.atWillSpells, nestId: \"spells_at-will-spells\" },\r\n          { ...groups.innateSpells, nestId: \"spells_innate-spells\" },\r\n          { ...groups.pactSpells, nestId: \"spells_pact-spells\" },\r\n          { ...groups.cantrips, nestId: \"spells_cantrips\" },\r\n          { ...groups._1stLevelSpells, nestId: \"spells_1st-level-spells\" },\r\n          { ...groups._2ndLevelSpells, nestId: \"spells_2nd-level-spells\" },\r\n          { ...groups._3rdLevelSpells, nestId: \"spells_3rd-level-spells\" },\r\n          { ...groups._4thLevelSpells, nestId: \"spells_4th-level-spells\" },\r\n          { ...groups._5thLevelSpells, nestId: \"spells_5th-level-spells\" },\r\n          { ...groups._6thLevelSpells, nestId: \"spells_6th-level-spells\" },\r\n          { ...groups._7thLevelSpells, nestId: \"spells_7th-level-spells\" },\r\n          { ...groups._8thLevelSpells, nestId: \"spells_8th-level-spells\" },\r\n          { ...groups._9thLevelSpells, nestId: \"spells_9th-level-spells\" },\r\n          { ...groups.additionalSpells, nestId: \"spells_additional-spells\" }\r\n        ]\r\n      },\r\n      {\r\n        nestId: \"attributes\",\r\n        id: \"attributes\",\r\n        name: coreModule.api.Utils.i18n(\"DND5E.Attributes\"),\r\n        groups: [\r\n          { ...groups.abilities, nestId: \"attributes_abilities\" },\r\n          { ...groups.skills, nestId: \"attributes_skills\" }\r\n        ]\r\n      },\r\n      {\r\n        nestId: \"effects\",\r\n        id: \"effects\",\r\n        name: coreModule.api.Utils.i18n(\"DND5E.Effects\"),\r\n        groups: [\r\n          { ...groups.temporaryEffects, nestId: \"effects_temporary-effects\" },\r\n          { ...groups.passiveEffects, nestId: \"effects_passive-effects\" },\r\n          { ...groups.conditions, nestId: \"effects_conditions\" }\r\n        ]\r\n      },\r\n      {\r\n        nestId: \"utility\",\r\n        id: \"utility\",\r\n        name: coreModule.api.Utils.i18n(\"tokenActionHud.utility\"),\r\n        groups: [\r\n          { ...groups.combat, nestId: \"utility_combat\" },\r\n          { ...groups.token, nestId: \"utility_token\" },\r\n          { ...groups.rests, nestId: \"utility_rests\" },\r\n          { ...groups.utility, nestId: \"utility_utility\" }\r\n        ]\r\n      }\r\n    ],\r\n    groups: groupsArray\r\n  };\r\n});\r\n","import { CUSTOM_DND5E } from \"./constants.js\";\r\n\r\nexport let RollHandler = null;\r\n\r\nHooks.once(\"tokenActionHudCoreApiReady\", async coreModule => {\r\n  RollHandler = class RollHandler extends coreModule.api.RollHandler {\r\n    /**\r\n     * Handle action click\r\n     * @override\r\n     * @param {object} event\r\n     */\r\n    async handleActionClick(event) {\r\n      const { actionType, actionId } = this.action.system;\r\n\r\n      if (!this.actor) {\r\n        for (const token of coreModule.api.Utils.getControlledTokens()) {\r\n          const actor = token.actor;\r\n          await this.handleAction(event, actionType, actor, token, actionId);\r\n        }\r\n      } else {\r\n        await this.handleAction(event, actionType, this.actor, this.token, actionId);\r\n      }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Handle action\r\n     * @private\r\n     * @param {object} event\r\n     * @param {string} actionType\r\n     * @param {object} actor\r\n     * @param {object} token\r\n     * @param {string} actionId\r\n     */\r\n    async handleAction(event, actionType, actor, token, actionId) {\r\n      switch (actionType) {\r\n        case \"ability\":\r\n          this.rollAbility(actor, actionId); break;\r\n        case \"check\":\r\n          this.rollAbilityTest(event, actor, actionId); break;\r\n        case \"save\":\r\n          this.rollAbilitySave(event, actor, actionId); break;\r\n        case \"condition\":\r\n          if (!token) return;\r\n          await this.toggleCondition(actor, token, actionId); break;\r\n        case \"counter\":\r\n          await this.modifyCounter(event, actor); break;\r\n        case \"effect\":\r\n          await this.toggleEffect(actor, actionId); break;\r\n        case \"exhaustion\":\r\n          await this.modifyExhaustion(event, actor); break;\r\n        case \"feature\":\r\n        case \"item\":\r\n        case \"spell\":\r\n        case \"weapon\":\r\n          if (this.isRenderItem()) this.renderItem(actor, actionId);\r\n          else this.useItem(event, actor, actionId);\r\n          break;\r\n        case \"magicItem\":\r\n          await this.rollMagicItem(actor, actionId); break;\r\n        case \"skill\":\r\n          this.rollSkill(actor, actionId); break;\r\n        case \"utility\":\r\n          await this.performUtilityAction(event, actor, token, actionId); break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Modify Counter\r\n     * @private\r\n     * @param {object} event The event\r\n     * @param {object} actor The actor\r\n     */\r\n    async modifyCounter(event, actor) {\r\n      switch (this.action?.system?.counterKey) {\r\n        case \"death-saves\":\r\n          this.rollDeathSave(event, actor); break;\r\n        case \"exhaustion\":\r\n          await this.modifyExhaustion(actor); break;\r\n        case \"inspiration\":\r\n          await this.modifyInspiration(actor); break;\r\n        default:\r\n          await this.modifyCustomCounter(actor); break;\r\n      }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Modify Exhaustion\r\n     * @private\r\n     * @param {object} actor The actor\r\n     */\r\n    async modifyExhaustion(actor) {\r\n      const currentExhaustion = actor.system.attributes.exhaustion;\r\n      const newExhaustion = currentExhaustion + (this.isRightClick ? -1 : 1);\r\n      if (newExhaustion >= 0 && newExhaustion !== currentExhaustion) {\r\n        actor.update({ \"system.attributes.exhaustion\": newExhaustion });\r\n      }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Modify Inspiration\r\n     * @private\r\n     * @param {object} actor The actor\r\n     */\r\n    async modifyInspiration(actor) {\r\n      const update = !actor.system.attributes.inspiration;\r\n      actor.update({ \"system.attributes.inspiration\": update });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Modify Custom Counter\r\n     * @private\r\n     * @param {object} actor The actor\r\n     */\r\n    async modifyCustomCounter(actor) {\r\n      const { counterKey, counterType } = this.action.system;\r\n\r\n      let value = actor.getFlag(CUSTOM_DND5E.ID, counterKey) || {};\r\n\r\n      const setFlag = async (key, currentValue, newValue) => {\r\n        if (newValue !== currentValue) {\r\n          await actor.setFlag(CUSTOM_DND5E.ID, key, newValue);\r\n        }\r\n      };\r\n\r\n      const adjustValue = (key, currentValue = 0, increment = 1) => {\r\n        const newValue = this.isRightClick ? Math.max(0, currentValue - increment) : currentValue + increment;\r\n        setFlag(key, currentValue, newValue);\r\n      };\r\n\r\n      switch (counterType) {\r\n        case \"checkbox\":\r\n          await setFlag(id, !value);\r\n          break;\r\n\r\n        case \"fraction\":\r\n          if (this.isRightClick || (value.max && value.value < value.max) || !value.max) {\r\n            adjustValue(`${id}.value`, value.value);\r\n          }\r\n          break;\r\n\r\n        case \"number\":\r\n          adjustValue(id, value);\r\n          break;\r\n\r\n        case \"successFailure\":\r\n          value.success = value?.success ?? 0;\r\n          value.failure = value?.failure ?? 0;\r\n          if (this.isCtrl) {\r\n            adjustValue(`${id}.failure`, value.failure);\r\n          } else {\r\n            adjustValue(`${id}.success`, value.success);\r\n          }\r\n      }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Roll Ability\r\n     * @private\r\n     * @param {object} actor    The actor\r\n     * @param {string} actionId The action id\r\n     */\r\n    rollAbility(actor, actionId) {\r\n      if (!actor.system?.abilities) return;\r\n      actor.rollAbility({ ability: actionId });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Roll Ability Save\r\n     * @private\r\n     * @param {object} event    The event\r\n     * @param {object} actor    The actor\r\n     * @param {string} actionId The action id\r\n     */\r\n    rollAbilitySave(event, actor, actionId) {\r\n      if (!actor.system?.abilities) return;\r\n      actor.rollAbilitySave(actionId, { event });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Roll Ability Test\r\n     * @private\r\n     * @param {object} event    The event\r\n     * @param {object} actor    The actor\r\n     * @param {string} actionId The action id\r\n     */\r\n    rollAbilityTest(event, actor, actionId) {\r\n      if (!actor.system?.abilities) return;\r\n      actor.rollAbilityTest(actionId, { event });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Roll Death Save\r\n     * @private\r\n     * @param {object} event    The event\r\n     * @param {object} actor    The actor\r\n     */\r\n    rollDeathSave(event, actor) {\r\n      actor.rollDeathSave({ event });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Roll Magic Item\r\n     * @private\r\n     * @param {object} actor    The actor\r\n     */\r\n    async rollMagicItem(actor) {\r\n      const { itemId, effectId } = this.action.system;\r\n\r\n      const magicItemActor = await MagicItems.actor(actor.id);\r\n      if (!magicItemActor) return;\r\n\r\n      // Magicitems module 3.0.0 does not support Item5e#use\r\n      magicItemActor.roll(itemId, effectId);\r\n      Hooks.callAll(\"forceUpdateTokenActionHud\");\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Roll Skill\r\n     * @private\r\n     * @param {object} actor    The actor\r\n     * @param {string} actionId The action id\r\n     */\r\n    rollSkill(actor, actionId) {\r\n      if (!actor.system?.skills) return;\r\n      actor.rollSkill({ skill: actionId });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Use Item\r\n     * @private\r\n     * @param {object} event    The event\r\n     * @param {object} actor    The actor\r\n     * @param {string} actionId The action id\r\n     */\r\n    useItem(event, actor, actionId) {\r\n      const item = coreModule.api.Utils.getItem(actor, actionId);\r\n\r\n      if (this.#needsRecharge(item)) {\r\n        item.rollRecharge();\r\n      } else {\r\n        item.use({ event, legacy: false });\r\n      }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Needs Recharge\r\n     * @private\r\n     * @param {object} item\r\n     * @returns {boolean}\r\n     */\r\n    #needsRecharge(item) {\r\n      return (item?.system?.uses?.period === \"recharge\" && !(item?.system?.uses?.value > 0));\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Perform utility action\r\n     * @param {object} event    The event\r\n     * @param {object} actor    The actor\r\n     * @param {object} token    The token\r\n     * @param {string} actionId The action id\r\n     */\r\n    async performUtilityAction(event, actor, token, actionId) {\r\n      switch (actionId) {\r\n        case \"deathSave\":\r\n          this.rollDeathSave(event, actor); break;\r\n        case \"endTurn\":\r\n          if (!token || game.combat?.current?.tokenId !== token.id) break;\r\n          await game.combat?.nextTurn(); break;\r\n        case \"initiative\":\r\n          await this.rollInitiative(event, actor); break;\r\n        case \"inspiration\":\r\n          await this.modifyInspiration(actor); break;\r\n        case \"longRest\":\r\n          actor.longRest(); break;\r\n        case \"shortRest\":\r\n          actor.shortRest(); break;\r\n      }\r\n\r\n      // Update HUD\r\n      Hooks.callAll(\"forceUpdateTokenActionHud\");\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Roll Initiative\r\n     * @param {object} event The event\r\n     * @param {object} actor The actor\r\n     * @private\r\n     */\r\n    async rollInitiative(event, actor) {\r\n      if (!actor) return;\r\n      await actor.rollInitiativeDialog({ event });\r\n      Hooks.callAll(\"forceUpdateTokenActionHud\");\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Toggle Condition\r\n     * @private\r\n     * @param {object} actor    The actor\r\n     * @param {object} token    The token\r\n     * @param {string} actionId The action id\r\n     */\r\n    async toggleCondition(actor, token, actionId) {\r\n      if (!token) return;\r\n\r\n      const statusEffect = CONFIG.statusEffects.find(statusEffect => statusEffect.id === actionId);\r\n      const isConvenient = statusEffect?.flags?.[\"dfreds-convenient-effects\"]?.isConvenient\r\n        ?? actionId.startsWith(\"Convenient Effect\");\r\n\r\n      if (game.dfreds && isConvenient) {\r\n        const effectName = statusEffect.name ?? statusEffect.label;\r\n        await game.dfreds.effectInterface.toggleEffect(effectName, { overlay: !!this.isRightClick });\r\n      } else {\r\n        const condition = this.#findCondition(actionId);\r\n        if (!condition) return;\r\n\r\n        const effect = this.#findEffect(actor, actionId);\r\n        if (effect?.disabled) { await effect.delete(); }\r\n\r\n        await actor.toggleStatusEffect(condition.id, { overlay: !!this.isRightClick });\r\n      }\r\n\r\n      Hooks.callAll(\"forceUpdateTokenActionHud\");\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Find condition\r\n     * @private\r\n     * @param {string} actionId The action id\r\n     * @returns {object}        The condition\r\n     */\r\n    #findCondition(actionId) {\r\n      return CONFIG.statusEffects.find(effect => effect.id === actionId);\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Find effect\r\n     * @param {object} actor    The actor\r\n     * @param {string} actionId The action id\r\n     * @returns {object}        The effect\r\n     */\r\n    #findEffect(actor, actionId) {\r\n      return actor.effects.find(effect => effect.statuses.every(status => status === actionId));\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Toggle Effect\r\n     * @private\r\n     * @param {object} actor    The actor\r\n     * @param {string} actionId The action id\r\n     */\r\n    async toggleEffect(actor, actionId) {\r\n      const effect = actor.allApplicableEffects().find(effect => effect.id === actionId);\r\n      if (!effect) return;\r\n\r\n      if (this.isRightClick && !effect.transfer) {\r\n        await effect.delete();\r\n      } else {\r\n        await effect.update({ disabled: !effect.disabled });\r\n      }\r\n\r\n      Hooks.callAll(\"forceUpdateTokenActionHud\");\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Handle action hover\r\n     * @override\r\n     * @param {object} event The event\r\n     */\r\n    async handleActionHover(event) {\r\n      const types = [\"feature\", \"item\", \"spell\", \"weapon\", \"magicItem\"];\r\n\r\n      if (!this.actor || !this.action?.system?.actionId) return;\r\n\r\n      const { actionType, actionId } = this.action.system;\r\n\r\n      if (!types.includes(actionType)) return;\r\n\r\n      const item = coreModule.api.Utils.getItem(this.actor, actionId);\r\n\r\n      if (this.isHover) {\r\n        Hooks.call(\"tokenActionHudSystemActionHoverOn\", event, item);\r\n      } else {\r\n        Hooks.call(\"tokenActionHudSystemActionHoverOff\", event, item);\r\n      }\r\n    }\r\n  };\r\n});\r\n","export let MagicItemActionHandlerExtender = null;\r\n\r\nHooks.once(\"tokenActionHudCoreApiReady\", async coreModule => {\r\n  MagicItemActionHandlerExtender = class MagicItemActionHandlerExtender extends coreModule.api.ActionHandlerExtender {\r\n    constructor(actionHandler) {\r\n      super();\r\n      this.actionHandler = actionHandler;\r\n      this.actor = null;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Extend the action list\r\n     */\r\n    async extendActionHandler() {\r\n      this.actor = this.actionHandler.actor;\r\n      if (!this.actor) return;\r\n\r\n      const actor = await MagicItems.actor(this.actor.id);\r\n\r\n      if (!actor) return;\r\n\r\n      const magicItems = actor.items ?? [];\r\n\r\n      if (magicItems.length === 0) return;\r\n\r\n      const parentGroupId = \"magic-items\";\r\n      const parentGroupType = \"system\";\r\n      const parentGroupData = {\r\n        id: parentGroupId,\r\n        type: parentGroupType\r\n      };\r\n\r\n      magicItems.forEach(magicItem => {\r\n        if (magicItem.attuned && !this._isItemAttuned(magicItem)) return;\r\n        if (magicItem.equipped && !this._isItemEquipped(magicItem)) return;\r\n\r\n        const groupId = `magic-items_${magicItem.id}`;\r\n        const groupName = magicItem.name;\r\n        const groupType = \"system-derived\";\r\n        const groupInfo1 = `${magicItem.uses}/${magicItem.charges}`;\r\n        const groupData = {\r\n          id: groupId,\r\n          name: groupName,\r\n          type: groupType,\r\n          info1: groupInfo1\r\n        };\r\n\r\n        // Add group to HUD\r\n        this.actionHandler.addGroup(groupData, parentGroupData);\r\n\r\n        const actions = magicItem.ownedEntries.map(entry => {\r\n          const effect = entry.item;\r\n          const id = effect.id;\r\n          const name = effect.name;\r\n          const img = coreModule.api.Utils.getImage(effect);\r\n          const info1 = effect.consumption;\r\n          const info2 = (effect.baseLevel) ? `${coreModule.api.Utils.i18n(\"DND5E.AbbreviationLevel\")} ${effect.baseLevel}` : \"\";\r\n          return {\r\n            id,\r\n            name,\r\n            encodedValue,\r\n            img,\r\n            info1,\r\n            info2,\r\n            selected: true,\r\n            system: { actionType: \"magicItem\", itemId: magicItem.id, effectId: id}\r\n          };\r\n        });\r\n\r\n        // Add actions to action list\r\n        this.actionHandler.addActions(actions, groupData);\r\n      });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Whether the magic item is equipped or not\r\n     * @param {object} magicItem The item\r\n     * @returns {boolean}\r\n     */\r\n    _isItemEquipped(magicItem) {\r\n      return magicItem.item.system.equipped;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Whether the magic items is attuned or not\r\n     * @param {object} magicItem The item\r\n     * @returns {boolean}\r\n     */\r\n    _isItemAttuned(magicItem) {\r\n      const attunement = magicItem.item.system.attunment;\r\n      const attunementRequired = CONFIG.DND5E.attunementTypes?.REQUIRED ?? 1;\r\n\r\n      if (attunement === attunementRequired) return false;\r\n\r\n      return true;\r\n    }\r\n  };\r\n});\r\n","import { MODULE } from \"./constants.js\";\r\n\r\nexport let Utils = null;\r\n\r\nHooks.once(\"tokenActionHudCoreApiReady\", async coreModule => {\r\n  Utils = class Utils {\r\n    /**\r\n     * Capitalize the first letter of every word\r\n     * @param {string} value The string to capitalize\r\n     * @returns {string}     The capitalized string\r\n     */\r\n    static capitalize(value) {\r\n      return value.replace(\r\n        /\\w\\S*/g,\r\n        text => text.charAt(0).toUpperCase() + text.substring(1).toLowerCase()\r\n      );\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get setting value\r\n     * @param {string} key The key\r\n     * @param {string=null} defaultValue The default value\r\n     * @returns {*} The setting value\r\n     */\r\n    static getSetting(key, defaultValue = null) {\r\n      let value = defaultValue ?? null;\r\n      try {\r\n        value = game.settings.get(MODULE.ID, key);\r\n      } catch{\r\n        coreModule.api.Logger.debug(`Setting '${key}' not found`);\r\n      }\r\n      return value;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Set setting value\r\n     * @param {string} key The key\r\n     * @param {string} value The value\r\n     */\r\n    static async setSetting(key, value) {\r\n      try {\r\n        value = await game.settings.set(MODULE.ID, key, value);\r\n        coreModule.api.Logger.debug(`Setting '${key}' set to '${value}'`);\r\n      } catch{\r\n        coreModule.api.Logger.debug(`Setting '${key}' not found`);\r\n      }\r\n    }\r\n  };\r\n});\r\n","// System Module Imports\r\nimport {\r\n  ACTIVATION_TYPE, ACTION_TYPE, CONCENTRATION_ICON, CUSTOM_DND5E, FEATURE_GROUP_IDS,\r\n  GROUP, PREPARED_ICON, PROFICIENCY_LEVEL_ICON, RARITY, SPELL_GROUP_IDS\r\n} from \"./constants.js\";\r\nimport { Utils } from \"./utils.js\";\r\n\r\nexport let ActionHandler = null;\r\n\r\nHooks.once(\"tokenActionHudCoreApiReady\", async coreModule => {\r\n  ActionHandler = class ActionHandler extends coreModule.api.ActionHandler {\r\n    // Initialize action variables\r\n    featureActions = null;\r\n\r\n    inventoryActions = null;\r\n\r\n    spellActions = null;\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build System Actions\r\n     * @override\r\n     * @param {Array} groupIds\r\n     * @returns {object}\r\n     */\r\n    async buildSystemActions(groupIds) {\r\n      // Set actor and token variables\r\n      this.actors = (!this.actor) ? this.#getValidActors() : [this.actor];\r\n      this.tokens = (!this.token) ? this.#getValidTokens() : [this.token];\r\n\r\n      // Set items variable\r\n      if (this.actor) {\r\n        this.items = coreModule.api.Utils.sortItemsByName(this.#discardSlowItems(this.actor.items));\r\n      }\r\n\r\n      // Set settings variables\r\n      this.abbreviateSkills = Utils.getSetting(\"abbreviateSkills\");\r\n      this.displaySpellInfo = Utils.getSetting(\"displaySpellInfo\");\r\n      this.showItemsWithoutActivationCosts = Utils.getSetting(\"showItemsWithoutActivationCosts\");\r\n      this.showUnchargedItems = Utils.getSetting(\"showUnchargedItems\");\r\n      this.showUnequippedItems = Utils.getSetting(\"showUnequippedItems\");\r\n      if (this.actor?.type === \"npc\" && !this.showUnequippedItems) {\r\n        this.showUnequippedItems = Utils.getSetting(\"showUnequippedItemsNpcs\");\r\n      }\r\n      this.showUnpreparedSpells = Utils.getSetting(\"showUnpreparedSpells\");\r\n\r\n      this.activationgroupIds = [\r\n        \"actions\",\r\n        \"bonus-actions\",\r\n        \"crew-actions\",\r\n        \"lair-actions\",\r\n        \"legendary-actions\",\r\n        \"reactions\",\r\n        \"other-actions\"\r\n      ];\r\n\r\n      if (this.actor?.type === \"character\" || this.actor?.type === \"npc\") {\r\n        this.inventorygroupIds = [\r\n          \"equipped\",\r\n          \"consumables\",\r\n          \"containers\",\r\n          \"equipment\",\r\n          \"loot\",\r\n          \"tools\",\r\n          \"weapons\",\r\n          \"unequipped\"\r\n        ];\r\n\r\n        await this.#buildCharacterActions();\r\n      } else if (this.actor?.type === \"vehicle\") {\r\n        this.inventorygroupIds = [\r\n          \"consumables\",\r\n          \"equipment\",\r\n          \"tools\",\r\n          \"weapons\"\r\n        ];\r\n\r\n        await this.#buildVehicleActions();\r\n      } else if (!this.actor) {\r\n        await this.#buildMultipleTokenActions();\r\n      }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build character actions\r\n     * @private\r\n     * @returns {object}\r\n     */\r\n    async #buildCharacterActions() {\r\n      await Promise.all([\r\n        this.#buildConditions(),\r\n        this.#buildEffects(),\r\n        this.#buildFeatures(),\r\n        this.#buildInventory(),\r\n        this.#buildSpells()\r\n      ]);\r\n      this.#buildAbilities(\"ability\", \"abilities\");\r\n      this.#buildAbilities(\"check\", \"checks\");\r\n      this.#buildAbilities(\"save\", \"saves\");\r\n      this.#buildCombat();\r\n      this.#buildCounters();\r\n      this.#buildExhaustion();\r\n      this.#buildRests();\r\n      this.#buildSkills();\r\n      this.#buildUtility();\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build vehicle actions\r\n     * @private\r\n     * @returns {object}\r\n     */\r\n    async #buildVehicleActions() {\r\n      await Promise.all([\r\n        this.#buildConditions(),\r\n        this.#buildEffects(),\r\n        this.#buildFeatures(),\r\n        this.#buildInventory()\r\n      ]);\r\n      this.#buildAbilities(\"ability\", \"abilities\");\r\n      this.#buildAbilities(\"check\", \"checks\");\r\n      this.#buildAbilities(\"save\", \"saves\");\r\n      this.#buildCombat();\r\n      this.#buildUtility();\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build multiple token actions\r\n     * @private\r\n     * @returns {object}\r\n     */\r\n    async #buildMultipleTokenActions() {\r\n      this.#buildAbilities(\"ability\", \"abilities\");\r\n      this.#buildAbilities(\"check\", \"checks\");\r\n      this.#buildAbilities(\"save\", \"saves\");\r\n      this.#buildCombat();\r\n      await this.#buildConditions();\r\n      this.#buildRests();\r\n      this.#buildSkills();\r\n      this.#buildUtility();\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build abilities\r\n     * @private\r\n     * @param {string} actionType\r\n     * @param {string} groupId\r\n     */\r\n    #buildAbilities(actionType, groupId) {\r\n      // Get abilities and exit if none exist\r\n      const abilities = this.actor?.system.abilities || CONFIG.DND5E.abilities;\r\n      if (abilities.length === 0) return;\r\n\r\n      // Get actions\r\n      const actions = Object.entries(abilities)\r\n        .filter(ability => abilities[ability[0]].value !== 0)\r\n        .map(([abilityId, ability]) => {\r\n          const name = CONFIG.DND5E.abilities[abilityId].label;\r\n          // ability.save deprecated in dnd5e 4.3.\r\n          const abilitySaveValue = ability?.save?.value ?? ability?.save;\r\n\r\n          const mod = (groupId === \"saves\") ? abilitySaveValue : ability?.mod;\r\n          return {\r\n            id: `${actionType}-${abilityId}`,\r\n            name: (this.abbreviateSkills) ? Utils.capitalize(abilityId) : name,\r\n            icon1: (groupId !== \"checks\") ? this.#getProficiencyIcon(abilities[abilityId].proficient) : \"\",\r\n            info1: (this.actor) ? {\r\n              text: coreModule.api.Utils.getModifier(mod),\r\n              title: `${game.i18n.localize(\"DND5E.ActionAbil\")}: ${coreModule.api.Utils.getModifier(mod)}`\r\n            } : null,\r\n            info2: (this.actor && groupId === \"abilities\") ? {\r\n              text: `(${coreModule.api.Utils.getModifier(abilitySaveValue)})`,\r\n              title: `${game.i18n.localize(\"DND5E.SavingThrow\")}: ${coreModule.api.Utils.getModifier(abilitySaveValue)}`\r\n            } : null,\r\n            listName: this.#getListName(actionType, name),\r\n            system: { actionType, actionId: abilityId }\r\n          };\r\n        });\r\n\r\n      // Add actions to action list\r\n      this.addActions(actions, { id: groupId });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build activations\r\n     * @public\r\n     * @param {object} data  groupData, actionData, actionType\r\n     */\r\n    async buildActivations(data) {\r\n      const { groupData, actionData, actionType = \"item\" } = data;\r\n\r\n      // Create map of items according to activation type\r\n      const activationItems = new Map();\r\n\r\n      // Loop items and add to activationItems\r\n      for (const [key, value] of actionData) {\r\n        const activationType = value.system?.activities?.contents[0]?.activation?.type;\r\n        const groupId = ACTIVATION_TYPE[activationType]?.group ?? \"other\";\r\n        if (!activationItems.has(groupId)) activationItems.set(groupId, new Map());\r\n        activationItems.get(groupId).set(key, value);\r\n      }\r\n\r\n      // Loop through action group ids\r\n      for (const value of Object.values(ACTIVATION_TYPE)) {\r\n        const group = value.group;\r\n\r\n        // Skip if no items exist\r\n        if (!activationItems.has(group)) continue;\r\n\r\n        // Clone and add to group data\r\n        const groupDataClone = { ...groupData, id: `${group}+${groupData.id}`, type: \"system-derived\" };\r\n\r\n        // Set Equipped and Unequipped groups to not selected by default\r\n        if ([\"equipped\", \"unequipped\"].includes(groupData.id)) { groupDataClone.defaultSelected = false; }\r\n\r\n        // Create parent group data\r\n        const parentgroupData = { id: group, type: \"system\" };\r\n\r\n        // Add group to HUD\r\n        await this.addGroup(groupDataClone, parentgroupData);\r\n\r\n        // Add spell slot info to group\r\n        if (actionType === \"spell\") { this.addGroupInfo(groupDataClone); }\r\n\r\n        // Build actions\r\n        await this.buildActions({\r\n          groupData: groupDataClone,\r\n          actionData: activationItems.get(group),\r\n          actionType\r\n        });\r\n      }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build combat\r\n     * @private\r\n     */\r\n    #buildCombat() {\r\n      // If token's turn, include endTurn\r\n      const combatType = {\r\n        initiative: \"tokenActionHud.dnd5e.rollInitiative\",\r\n        ...(game.combat?.current?.tokenId === this.token?.id && { endTurn: \"tokenActionHud.endTurn\" })\r\n      };\r\n\r\n      const tokens = coreModule.api.Utils.getControlledTokens();\r\n      const tokenIds = tokens?.map(token => token.id);\r\n      const combatants = (game.combat)\r\n        ? game.combat.combatants.filter(combatant => tokenIds.includes(combatant.tokenId))\r\n        : [];\r\n\r\n      const getInfo1 = id => {\r\n        if (id === \"initiative\" && combatants.length === 1) {\r\n          const currentInitiative = combatants[0].initiative;\r\n          return { class: \"tah-spotlight\", text: currentInitiative };\r\n        }\r\n        return {};\r\n      };\r\n\r\n      const getActive = () => { return combatants.length > 0 && (combatants.every(combatant => combatant?.initiative)) ? \" active\" : \"\";};\r\n\r\n      // Get actions\r\n      const actionType = \"utility\";\r\n      const actions = Object.entries(combatType).map(([id, name]) => {\r\n        return {\r\n          id,\r\n          name: game.i18n.localize(name),\r\n          info1: getInfo1(id),\r\n          cssClass: (id === \"initiative\" ) ? `toggle${getActive()}` : \"\",\r\n          listName: this.#getListName(actionType, name),\r\n          system: { actionType, actionId: id }\r\n        };\r\n      });\r\n\r\n      // Add actions to HUD\r\n      this.addActions(actions, { id: \"combat\" });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build conditions\r\n     * @private\r\n     */\r\n    async #buildConditions() {\r\n      if (this.tokens?.length === 0) return;\r\n\r\n      // Get conditions and exit if none exist\r\n      const conditions = CONFIG.statusEffects.filter(condition => condition.id !== \"\");\r\n      if (conditions.length === 0) return;\r\n\r\n      // Get actions\r\n      const actionType = \"condition\";\r\n      const actions = await Promise.all(conditions.map(async condition => {\r\n        const hasCondition = this.actors.every(actor => {\r\n          return actor.effects.some(effect => effect.statuses.some(status => status === condition.id)\r\n          && !effect?.disabled);\r\n        });\r\n        const name = game.i18n.localize(condition.label) ?? condition.name;\r\n        return {\r\n          id: condition.id,\r\n          name,\r\n          img: coreModule.api.Utils.getImage(condition),\r\n          cssClass: `toggle${(hasCondition) ? \" active\" : \"\"}`,\r\n          listName: this.#getListName(actionType, name),\r\n          tooltip: this.#getConditionTooltipData(condition.id, condition.name),\r\n          system: { actionType, actionId: condition.id }\r\n        };\r\n      }));\r\n\r\n      // Add actions to HUD\r\n      this.addActions(actions, { id: \"conditions\" });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build counters\r\n     * @private\r\n     */\r\n    async #buildCounters() {\r\n      if (!coreModule.api.Utils.isModuleActive(CUSTOM_DND5E.ID)\r\n        || !CUSTOM_DND5E.COUNTERS[this.actor?.type]) return;\r\n\r\n      const actionType = \"counter\";\r\n\r\n      let counters = game.settings.get(CUSTOM_DND5E.ID, CUSTOM_DND5E.COUNTERS[this.actor?.type]) ?? {};\r\n\r\n      if (coreModule.api.Utils.isModuleActive(CUSTOM_DND5E.ID) && Object.keys(counters).length) {\r\n        counters = Object.entries(counters)\r\n          .filter(([_, value]) => value.visible)\r\n          .map(([key, value]) => {\r\n            value.key = key;\r\n            return value;\r\n          });\r\n      } else {\r\n        counters = [\r\n          {\r\n            name: game.i18n.localize(\"DND5E.DeathSave\"),\r\n            type: \"successFailure\",\r\n            system: true,\r\n            visible: true,\r\n            key: \"death-saves\"\r\n          },\r\n          {\r\n            name: game.i18n.localize(\"DND5E.Exhaustion\"),\r\n            type: \"number\",\r\n            system: true,\r\n            visible: true,\r\n            key: \"exhaustion\"\r\n          },\r\n          {\r\n            name: game.i18n.localize(\"DND5E.Inspiration\"),\r\n            type: \"checkbox\",\r\n            system: true,\r\n            visible: true,\r\n            key: \"inspiration\"\r\n          }\r\n        ];\r\n      }\r\n\r\n      // Get actions\r\n      const actions = counters.map(counter => {\r\n        let active = \"\";\r\n        let cssClass = \"\";\r\n        let img = \"\";\r\n        let info1 = \"\";\r\n        if (counter.system) {\r\n          switch (counter.key) {\r\n            case \"exhaustion\":\r\n              active = (this.actor.system.attributes.exhaustion > 0) ? \" active\" : \"\";\r\n              cssClass = `toggle${active}`;\r\n              img = coreModule.api.Utils.getImage(\"modules/token-action-hud-dnd5e/icons/exhaustion.svg\");\r\n              info1 = { text: this.actor.system.attributes.exhaustion };\r\n              break;\r\n            case \"death-saves\":\r\n              img = coreModule.api.Utils.getImage(\"modules/token-action-hud-dnd5e/icons/death-saves.svg\");\r\n              info1 = { text: `${this.actor.system.attributes.death.success}/${this.actor.system.attributes.death.failure}` };\r\n              break;\r\n            case \"inspiration\":\r\n              active = (this.actor.system.attributes.inspiration) ? \" active\" : \"\";\r\n              cssClass = `toggle${active}`;\r\n              img = coreModule.api.Utils.getImage(\"modules/token-action-hud-dnd5e/icons/inspiration.svg\");\r\n              break;\r\n          }\r\n        } else {\r\n          const value = this.actor.getFlag(CUSTOM_DND5E.ID, counter.key);\r\n          switch (counter.type) {\r\n            case \"checkbox\":\r\n              active = (value) ? \" active\" : \"\";\r\n              cssClass = `toggle${active}`;\r\n              break;\r\n            case \"fraction\":\r\n              active = (value.value > 0) ? \" active\" : \"\";\r\n              cssClass = `toggle${active}`;\r\n              info1 = { text: `${value.value ?? 0}/${value.max ?? 0}` };\r\n              break;\r\n            case \"number\":\r\n              active = (value > 0) ? \" active\" : \"\";\r\n              cssClass = `toggle${active}`;\r\n              info1 = { text: value };\r\n              break;\r\n            case \"successFailure\":\r\n              info1 = { text: `${value?.success ?? 0}/${value?.failure ?? 0}` };\r\n              break;\r\n          }\r\n        }\r\n\r\n        return {\r\n          id: counter.key,\r\n          name: counter.label,\r\n          listName: this.#getListName(actionType, counter.name),\r\n          cssClass,\r\n          img,\r\n          info1,\r\n          system: { actionType, counterKey: counter.key, counterType: counter.type}\r\n        };\r\n      });\r\n\r\n      // Add actions to HUD\r\n      this.addActions(actions, { id: \"counters\" });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build effects\r\n     * @private\r\n     */\r\n    async #buildEffects() {\r\n      const actionType = \"effect\";\r\n\r\n      // Get effects and exit if none exist\r\n      const effects = new Map(this.actor.allApplicableEffects().map(effect => [effect.id, effect]));\r\n      if (effects.size === 0) return;\r\n\r\n      // Map passive and temporary effects to new maps\r\n      const passiveEffects = new Map();\r\n      const temporaryEffects = new Map();\r\n      const statusEffectIds = new Set(CONFIG.statusEffects.map(statusEffect => statusEffect._id));\r\n\r\n      // Iterate effects and add to a map based on the isTemporary value\r\n      for (const [effectId, effect] of effects.entries()) {\r\n        if (effect.isSuppressed) continue;\r\n        if (effect.parent?.system?.identified === false && !game.user.isGM) continue;\r\n        if (statusEffectIds.has(effect.id)) continue;\r\n\r\n        if (effect.isTemporary) { temporaryEffects.set(effectId, effect); }\r\n        else { passiveEffects.set(effectId, effect); }\r\n      }\r\n\r\n      // Build passive and temporary effects\r\n      await Promise.all([\r\n        this.buildActions({ groupData: { id: \"passive-effects\" }, actionData: passiveEffects, actionType }),\r\n        this.buildActions({ groupData: { id: \"temporary-effects\" }, actionData: temporaryEffects, actionType })\r\n      ]);\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build exhaustion\r\n     * @private\r\n     */\r\n    #buildExhaustion() {\r\n      // Exit if every actor is not the character type\r\n      if (!this.actors.every(actor => actor.type === \"character\")) return;\r\n\r\n      // Get actions\r\n      const actionType = \"exhaustion\";\r\n      const active = this.actor.system.attributes.exhaustion > 0 ? \" active\" : \"\";\r\n      const actions = [{\r\n        id: \"exhaustion\",\r\n        name: game.i18n.localize(\"DND5E.Exhaustion\"),\r\n        cssClass: `toggle${active}`,\r\n        img: coreModule.api.Utils.getImage(\"modules/token-action-hud-dnd5e/icons/exhaustion.svg\"),\r\n        info1: { text: this.actor.system.attributes.exhaustion },\r\n        listName: this.#getListName(actionType, name),\r\n        system: { actionType, actionId: \"exhaustion\" }\r\n      }];\r\n\r\n      // Add actions to HUD\r\n      this.addActions(actions, { id: \"exhaustion\" });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build features\r\n     * @private\r\n     */\r\n    async #buildFeatures() {\r\n      // Filter feats from items and exit if none exist\r\n      const feats = new Map([...this.items].filter(([, value]) => value.type === \"feat\"));\r\n      if (feats.size === 0) return;\r\n\r\n      // Map active and passive features to new maps\r\n      const featuresMap = new Map([\r\n        [\"activeFeatures\", new Map()],\r\n        [\"passiveFeatures\", new Map()]\r\n      ]);\r\n\r\n      const featureType = {\r\n        background: \"backgroundFeatures\",\r\n        class: \"classFeatures\",\r\n        monster: \"monsterFeatures\",\r\n        race: \"raceFeatures\",\r\n        feats: \"feats\"\r\n      };\r\n\r\n      const classFeatureType = {\r\n        artificerInfusion: \"artificerInfusions\",\r\n        channelDivinity: \"channelDivinity\",\r\n        defensiveTactic: \"defensiveTactics\",\r\n        eldritchInvocation: \"eldritchInvocations\",\r\n        elementalDiscipline: \"elementalDisciplines\",\r\n        fightingStyle: \"fightingStyles\",\r\n        huntersPrey: \"huntersPrey\",\r\n        ki: \"kiAbilities\",\r\n        maneuver: \"maneuvers\",\r\n        metamagic: \"metamagicOptions\",\r\n        multiattack: \"multiattacks\",\r\n        pact: \"pactBoons\",\r\n        psionicPower: \"psionicPowers\",\r\n        rune: \"runes\",\r\n        superiorHuntersDefense: \"superiorHuntersDefense\"\r\n      };\r\n\r\n      for (const [key, value] of feats) {\r\n        const activationType = value.system.activities.contents[0]?.type;\r\n        const type = value.system.type.value;\r\n        const subType = value.system.type?.subtype;\r\n\r\n        if (activationType) { featuresMap.get(\"activeFeatures\").set(key, value); }\r\n        else { featuresMap.get(\"passiveFeatures\").set(key, value); }\r\n\r\n        // Map feature types\r\n        if (featureType[type]) {\r\n          if (!featuresMap.has(featureType[type])) featuresMap.set(featureType[type], new Map());\r\n          featuresMap.get(featureType[type]).set(key, value);\r\n        }\r\n\r\n        // Map class feature subtypes\r\n        if (classFeatureType[subType]) {\r\n          if (!featuresMap.has(classFeatureType[subType])) featuresMap.set(classFeatureType[subType], new Map());\r\n          featuresMap.get(classFeatureType[subType]).set(key, value);\r\n        }\r\n      }\r\n\r\n      // Loop through inventory groups ids\r\n      for (const id of FEATURE_GROUP_IDS) {\r\n        const actionData = featuresMap.get(id);\r\n        if (!actionData || actionData.size === 0) continue;\r\n\r\n        // Create group data\r\n        const groupData = {\r\n          id: GROUP[id].id,\r\n          name: game.i18n.localize(GROUP[id].name) ?? \"\"\r\n        };\r\n\r\n        // Build actions and activations\r\n        const actionType = \"feature\";\r\n        await this.buildActions({ groupData, actionData, actionType });\r\n        await this.buildActivations({ groupData, actionData, actionType });\r\n      }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build inventory\r\n     * @private\r\n     */\r\n    async #buildInventory() {\r\n      // Exit early if no items exist\r\n      if (this.items.size === 0) return;\r\n\r\n      // Initialize inventory map categories\r\n      const inventoryMap = new Map([\r\n        [\"equipped\", new Map()],\r\n        [\"unequipped\", new Map()],\r\n        [\"consumables\", new Map()],\r\n        [\"containers\", new Map()],\r\n        [\"equipment\", new Map()],\r\n        [\"loot\", new Map()],\r\n        [\"tools\", new Map()],\r\n        [\"weapons\", new Map()]\r\n      ]);\r\n\r\n      for (const [key, value] of this.items) {\r\n        // Set items into maps\r\n        if (value.system?.quantity > 0 && this.#isActiveItem(value)) {\r\n          if (value.system.equipped) { inventoryMap.get(\"equipped\").set(key, value); }\r\n          else { inventoryMap.get(\"unequipped\").set(key, value); }\r\n\r\n          if (this.#isUsableItem(value) && value.type === \"consumable\") inventoryMap.get(\"consumables\").set(key, value);\r\n          if (this.#isEquippedItem(value)) {\r\n            switch (value.type) {\r\n              case \"container\": inventoryMap.get(\"containers\").set(key, value); break;\r\n              case \"equipment\": inventoryMap.get(\"equipment\").set(key, value); break;\r\n              case \"loot\": inventoryMap.get(\"loot\").set(key, value); break;\r\n              case \"tool\": inventoryMap.get(\"tools\").set(key, value); break;\r\n              case \"weapon\": inventoryMap.get(\"weapons\").set(key, value); break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Loop through inventory subcateogry ids\r\n      for (const groupId of this.inventorygroupIds) {\r\n        const actionData = inventoryMap.get(groupId);\r\n        if (!actionData || actionData.size === 0) continue;\r\n\r\n        // Create group data\r\n        const groupData = {\r\n          id: groupId,\r\n          name: game.i18n.localize(GROUP[groupId].name)\r\n        };\r\n\r\n        const data = { groupData, actionData };\r\n\r\n        // Build actions and activations\r\n        await this.buildActions(data);\r\n        await this.buildActivations(data);\r\n      }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build rests\r\n     * @private\r\n     */\r\n    #buildRests() {\r\n      // Exit if every actor is not the character type\r\n      if (this.actors.length === 0 || !this.actors.every(actor => actor.type === \"character\")) return;\r\n\r\n      // Get actions\r\n      const actionType = \"utility\";\r\n      const restTypes = { shortRest: \"DND5E.REST.Short.Label\", longRest: \"DND5E.REST.Long.Label\" };\r\n      const actions = Object.entries(restTypes).map(([id, name]) => {\r\n        name = game.i18n.localize(name);\r\n        return {\r\n          id,\r\n          name,\r\n          listName: this.#getListName(actionType, name),\r\n          system: { actionType, actionId: id }\r\n        };\r\n      });\r\n\r\n      // Add actions to HUD\r\n      this.addActions(actions, { id: \"rests\" });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build skills\r\n     * @private\r\n     */\r\n    #buildSkills() {\r\n      // Get skills and exit if none exist\r\n      const skills = this.actor?.system.skills || CONFIG.DND5E.skills;\r\n      if (skills.length === 0) return;\r\n\r\n      // Get actions\r\n      const actionType = \"skill\";\r\n      const actions = Object.entries(skills).map(([id, skill]) => {\r\n        try {\r\n          const name = CONFIG.DND5E.skills[id].label;\r\n          return {\r\n            id,\r\n            name: this.abbreviateSkills ? Utils.capitalize(id) : name,\r\n            icon1: this.#getProficiencyIcon(skill.value),\r\n            info1: (this.actor) ? { text: coreModule.api.Utils.getModifier(skill.total) } : \"\",\r\n            listName: this.#getListName(actionType, name),\r\n            system: { actionType, actionId: id }\r\n          };\r\n        } catch(error) {\r\n          coreModule.api.Logger.error(skill);\r\n          return null;\r\n        }\r\n      }).filter(skill => !!skill);\r\n\r\n      // Add actions to HUD\r\n      this.addActions(actions, { id: \"skills\" });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build spells\r\n     */\r\n    async #buildSpells() {\r\n      // Filter items for spells and exit if none exist\r\n      const spells = new Map([...this.items].filter(([, value]) => value.type === \"spell\"));\r\n      if (spells.size === 0) return;\r\n\r\n      // Initialize spells map categories\r\n      const spellsMap = new Map([\r\n        [\"atWillSpells\", new Map()],\r\n        [\"innateSpells\", new Map()],\r\n        [\"pactSpells\", new Map()],\r\n        [\"cantrips\", new Map()],\r\n        [\"_1stLevelSpells\", new Map()],\r\n        [\"_2ndLevelSpells\", new Map()],\r\n        [\"_3rdLevelSpells\", new Map()],\r\n        [\"_4thLevelSpells\", new Map()],\r\n        [\"_5thLevelSpells\", new Map()],\r\n        [\"_6thLevelSpells\", new Map()],\r\n        [\"_7thLevelSpells\", new Map()],\r\n        [\"_8thLevelSpells\", new Map()],\r\n        [\"_9thLevelSpells\", new Map()],\r\n        [\"additionalSpells\", new Map()]\r\n      ]);\r\n\r\n      // Loop through items\r\n      for (const [key, value] of spells) {\r\n        if (!this.#isUsableItem(value) || !this.#isUsableSpell(value)) continue;\r\n\r\n        if (value.system.linkedActivity) {\r\n          if (value.system.linkedActivity.displayInSpellbook) {\r\n            spellsMap.get(\"additionalSpells\").set(key, value);\r\n          }\r\n        } else {\r\n          switch (value.system.preparation.mode) {\r\n            case \"atwill\":\r\n              spellsMap.get(\"atWillSpells\").set(key, value); break;\r\n            case \"innate\":\r\n              spellsMap.get(\"innateSpells\").set(key, value); break;\r\n            case \"pact\":\r\n              spellsMap.get(\"pactSpells\").set(key, value); break;\r\n            default: {\r\n              switch (value.system.level) {\r\n                case 0:\r\n                  spellsMap.get(\"cantrips\").set(key, value); break;\r\n                case 1:\r\n                  spellsMap.get(\"_1stLevelSpells\").set(key, value); break;\r\n                case 2:\r\n                  spellsMap.get(\"_2ndLevelSpells\").set(key, value); break;\r\n                case 3:\r\n                  spellsMap.get(\"_3rdLevelSpells\").set(key, value); break;\r\n                case 4:\r\n                  spellsMap.get(\"_4thLevelSpells\").set(key, value); break;\r\n                case 5:\r\n                  spellsMap.get(\"_5thLevelSpells\").set(key, value); break;\r\n                case 6:\r\n                  spellsMap.get(\"_6thLevelSpells\").set(key, value); break;\r\n                case 7:\r\n                  spellsMap.get(\"_7thLevelSpells\").set(key, value); break;\r\n                case 8:\r\n                  spellsMap.get(\"_8thLevelSpells\").set(key, value); break;\r\n                case 9:\r\n                  spellsMap.get(\"_9thLevelSpells\").set(key, value); break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Reverse sort spell slots by level\r\n      const systemSpells = Object.entries(this.actor.system.spells).reverse();\r\n\r\n      // Set spell slot availability\r\n      const spellSlotsMap = new Map();\r\n      let spellSlotAvailable = this.showUnchargedItems;\r\n      let pactSlotAvailable = this.showUnchargedItems;\r\n      let pactSlot = null;\r\n\r\n      for (const [key, value] of systemSpells) {\r\n        const hasValue = value.value > 0;\r\n        const hasMax = value.max > 0;\r\n        const hasLevel = value.level > 0;\r\n\r\n        if (key === \"pact\") {\r\n          pactSlotAvailable = pactSlotAvailable || (hasValue && hasMax && hasLevel);\r\n          value.slotAvailable = pactSlotAvailable && hasLevel;\r\n          pactSlot = [key, value];\r\n        } else if (key.startsWith(\"spell\") && key !== \"spell0\") {\r\n          spellSlotAvailable = spellSlotAvailable || (hasValue && hasMax);\r\n          value.slotAvailable = spellSlotAvailable;\r\n          spellSlotsMap.set(key, value);\r\n        } else if (hasValue) {\r\n          value.slotsAvailable = true;\r\n          spellSlotsMap.set(key, value);\r\n        }\r\n      }\r\n\r\n      // Set equivalent spell slot where pact slot is available\r\n      if (pactSlot[1].slotAvailable) {\r\n        const spellSlot = spellSlotsMap.get(`spell${pactSlot[1].level}`);\r\n        spellSlot.slotsAvailable = true;\r\n      }\r\n\r\n      const spellSlotModes = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9, \"pact\"]);\r\n\r\n      for (const id of SPELL_GROUP_IDS) {\r\n        // Skip if no spells exist\r\n        if (!spellsMap.has(id)) continue;\r\n\r\n        const spellMode = GROUP[id].spellMode;\r\n        const levelInfo = (spellMode === \"pact\") ? pactSlot[1] : spellSlotsMap.get(`spell${spellMode}`);\r\n        const { value: slots = 0, max = 0, slotAvailable = false } = levelInfo || {};\r\n\r\n        // Skip if spells require spell slots and none are available\r\n        if (!slotAvailable && spellSlotModes.has(spellMode)) continue;\r\n\r\n        // Create group data\r\n        const groupData = {\r\n          id: GROUP[id].id,\r\n          name: game.i18n.localize(GROUP[id].name),\r\n          info: { info1: { class: \"tah-spotlight\", text: (max > 0) ? `${slots}/${max}` : \"\" } }\r\n        };\r\n\r\n        // Add spell slot info to group\r\n        this.addGroupInfo(groupData);\r\n\r\n        const data = { groupData, actionData: spellsMap.get(id), actionType: \"spell\" };\r\n\r\n        // Build actions and activations\r\n        await this.buildActions(data);\r\n        await this.buildActivations(data);\r\n      }\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build utility\r\n     * @private\r\n     */\r\n    #buildUtility() {\r\n      // Exit if every actor is not the character type\r\n      if (this.actors.length === 0) return;\r\n      if (!this.actors.every(actor => actor.type === \"character\")) return;\r\n\r\n      const actionType = \"utility\";\r\n\r\n      // Set utility types\r\n      const utilityTypes = {\r\n        deathSave: { name: game.i18n.localize(\"DND5E.DeathSave\") },\r\n        inspiration: { name: game.i18n.localize(\"DND5E.Inspiration\") }\r\n      };\r\n\r\n      // Delete 'deathSave' for multiple tokens\r\n      if (!this.actor || this.actor.system.attributes.hp.value > 0) delete utilityTypes.deathSave;\r\n\r\n      // Get actions\r\n      const actions = Object.entries(utilityTypes)\r\n        .map(utilityType => {\r\n          const id = utilityType[0];\r\n          const name = utilityType[1].name;\r\n          let cssClass = \"\";\r\n          if (utilityType[0] === \"inspiration\") {\r\n            const active = this.actors.every(actor => actor.system.attributes?.inspiration)\r\n              ? \" active\"\r\n              : \"\";\r\n            cssClass = `toggle${active}`;\r\n          }\r\n          return {\r\n            id,\r\n            name,\r\n            cssClass,\r\n            listName: this.#getListName(actionType, name),\r\n            system: { actionType, actionId: id }\r\n          };\r\n        });\r\n\r\n      // Crreate group data\r\n      const groupData = { id: \"utility\" };\r\n\r\n      // Add actions to HUD\r\n      this.addActions(actions, groupData);\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Build actions\r\n     * @public\r\n     * @param {object} data actionData, groupData, actionType\r\n     * @param {object} options\r\n     */\r\n    async buildActions(data, options) {\r\n      const { actionData, groupData, actionType } = data;\r\n\r\n      // Exit if there is no action data\r\n      if (actionData.size === 0) return;\r\n\r\n      // Exit if there is no groupId\r\n      const groupId = (typeof groupData === \"string\" ? groupData : groupData?.id);\r\n      if (!groupId) return;\r\n\r\n      // Get actions\r\n      const actions = await Promise.all([...actionData].map(async item => await this.#getAction(item[1], actionType)));\r\n\r\n      // Add actions to action list\r\n      this.addActions(actions, groupData);\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get action\r\n     * @private\r\n     * @param {object} entity      The entity\r\n     * @param {string} actionType The action type\r\n     * @returns {object}           The action\r\n     */\r\n    async #getAction(entity, actionType = \"item\") {\r\n      const id = entity.id ?? entity._id;\r\n      let name = entity?.name ?? entity?.label;\r\n      let cssClass = \"\";\r\n      if (Object.hasOwn(entity, \"disabled\")) {\r\n        const active = (!entity.disabled) ? \" active\" : \"\";\r\n        cssClass = `toggle${active}`;\r\n      }\r\n      const info = this.#getItemInfo(entity);\r\n      const tooltip = this.#getTooltipData(entity);\r\n      return {\r\n        id,\r\n        name,\r\n        cssClass,\r\n        img: coreModule.api.Utils.getImage(entity),\r\n        icon1: this.#getActivationTypeIcon(entity.system?.activities?.contents[0]?.activation.type),\r\n        icon2: this.#getPreparedIcon(entity),\r\n        icon3: this.#getConcentrationIcon(entity),\r\n        info1: info?.info1,\r\n        info2: info?.info2,\r\n        info3: info?.info3,\r\n        listName: this.#getListName(actionType, name),\r\n        tooltip,\r\n        system: { actionType, actionId: id }\r\n      };\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Is active item\r\n     * @private\r\n     * @param {object} item The item\r\n     * @returns {boolean}   Whether the item is active\r\n     */\r\n    #isActiveItem(item) {\r\n      if (this.showItemsWithoutActivationCosts) return true;\r\n      const activationTypes = new Set(Object.keys(CONFIG.DND5E.activityActivationTypes).filter(activationType => activationType !== \"none\"));\r\n      const activationType = item.system?.activities?.contents[0]?.activation?.type;\r\n      return activationTypes.has(activationType) || item.type === \"tool\";\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Is equipped item\r\n     * @private\r\n     * @param {object} item The item\r\n     * @returns {boolean}   Whether the item is equipped\r\n     */\r\n    #isEquippedItem(item) {\r\n      const excludedTypes = [\"consumable\", \"spell\", \"feat\"];\r\n      return (this.showUnequippedItems && !excludedTypes.includes(item.type))\r\n      || (item.system.equipped && item.type !== \"consumable\");\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Is usable item\r\n     * @private\r\n     * @param {object} item The item\r\n     * @returns {boolean}   Whether the item is usable\r\n     */\r\n    #isUsableItem(item) {\r\n      return this.showUnchargedItems || !!item.system.uses?.value || !item.system.uses?.max;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Is usable spell\r\n     * @private\r\n     * @param {object} spell The spell\r\n     * @returns {boolean}    Whether the spell is usable\r\n     */\r\n    #isUsableSpell(spell) {\r\n      if (this.actor?.type !== \"character\" && this.showUnequippedItems) return true;\r\n      if (this.showUnpreparedSpells) return true;\r\n\r\n      const preparationModes = new Set(Object.keys(CONFIG.DND5E.spellPreparationModes).filter(preparationMode => preparationMode !== \"prepared\"));\r\n\r\n      // Return true if the spell has a preparation mode other than 'prepared' or is prepared\r\n      return preparationModes.has(spell.system.preparation.mode)\r\n        || spell.system.preparation.prepared || spell.system.linkedActivity?.displayInSpellbook;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    #getListName(actionType, actionName) {\r\n      const prefix = `${game.i18n.localize(ACTION_TYPE[actionType])}: ` ?? \"\";\r\n      return `${prefix}${actionName}` ?? \"\";\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get item info\r\n     * @private\r\n     * @param {object} item\r\n     * @returns {object}\r\n     */\r\n    #getItemInfo(item) {\r\n      const info1 = item.type === \"spell\" ? this.#getSpellInfo(item) : this.#getQuantityData(item);\r\n      const info2 = this.#getUsesData(item);\r\n      const info3 = this.#getConsumeData(item);\r\n\r\n      return { info1, info2, info3 };\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Add spell info\r\n     * @private\r\n     * @param {object} spell The spell\r\n     * @returns {object}     The spell info\r\n     */\r\n    #getSpellInfo(spell) {\r\n      if (!this.displaySpellInfo) return null;\r\n\r\n      const components = spell.system?.properties;\r\n      if (!components) return null;\r\n\r\n      const info = { text: \"\", title: \"\" };\r\n      const componentTypes = {\r\n        vocal: \"DND5E.ComponentVerbal\",\r\n        somatic: \"DND5E.ComponentSomatic\",\r\n        material: \"DND5E.ComponentMaterial\"\r\n      };\r\n\r\n\r\n      const componentsArray = Object.entries(componentTypes)\r\n        .filter(([key]) => components[key])\r\n        .map(([key, label]) => {\r\n          info.text += game.i18n.localize(`${label}Abbr`);\r\n          return game.i18n.localize(label);\r\n        });\r\n\r\n      // Ritual\r\n      if (components.ritual) {\r\n        componentsArray.push(`[${game.i18n.localize(\"DND5E.Ritual\")}]`);\r\n        info.text += ` [${game.i18n.localize(\"DND5E.RitualAbbr\")}]`;\r\n      }\r\n\r\n      info.title = componentsArray.join(\", \");\r\n\r\n      return info;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get valid actors\r\n     * @private\r\n     * @returns {object}\r\n     */\r\n    #getValidActors() {\r\n      const allowedTypes = [\"character\", \"npc\"];\r\n      return this.actors.every(actor => allowedTypes.includes(actor.type)) ? this.actors : [];\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get valid tokens\r\n     * @private\r\n     * @returns {object}\r\n     */\r\n    #getValidTokens() {\r\n      const allowedTypes = [\"character\", \"npc\"];\r\n      return this.actors.every(actor => allowedTypes.includes(actor.type)) ? this.tokens : [];\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get quantity\r\n     * @private\r\n     * @param {object} item\r\n     * @returns {string}\r\n     */\r\n    #getQuantityData(item) {\r\n      const quantity = item?.system?.quantity ?? 0;\r\n      return {\r\n        text: (quantity > 1) ? quantity : \"\",\r\n        title: `${game.i18n.localize(\"DND5E.Quantity\")}: ${quantity}`\r\n      };\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get uses\r\n     * @private\r\n     * @param {object} item\r\n     * @returns {string}\r\n     */\r\n    #getUsesData(item) {\r\n      const uses = item?.system?.uses;\r\n      if (!(uses?.max > 0)) return {};\r\n      const per = uses.recovery[0]?.period === \"charges\" ? \"\" : ` ${game.i18n.localize(\"DND5E.per\")} `;\r\n      const period = CONFIG.DND5E.limitedUsePeriods[uses.recovery[0]?.period]?.label ?? uses.recovery[0]?.period;\r\n      const perPeriod = (period) ? `${per}${period}` : \"\";\r\n      const remainingUses = uses.max - (uses.spent ?? 0);\r\n      const text = `${remainingUses}/${uses.max}`;\r\n      const title = `${text}${perPeriod}`;\r\n      return { text, title };\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get consume\r\n     * @private\r\n     * @param {object} item\r\n     * @returns {string}\r\n     */\r\n    #getConsumeData(item) {\r\n      // Get consume target and type\r\n      const firstActivity = item?.system?.activities?.contents[0];\r\n      const firstTarget = firstActivity?.consumption?.targets?.[0];\r\n      const consumeId = firstTarget?.target;\r\n      const consumeType = firstTarget?.type;\r\n      const consumeAmount = firstTarget?.value;\r\n\r\n      if (!consumeId || !consumeType || consumeId === item.id) return {};\r\n\r\n      // Return resources\r\n      if (consumeType === \"attribute\") {\r\n        const parentId = consumeId.substr(0, consumeId.lastIndexOf(\".\"));\r\n        const target = foundry.utils.getProperty(this.actor.system, parentId);\r\n\r\n        if (target) {\r\n          const text = `${target.value ?? \"0\"}${target.max ? `/${target.max}` : \"\"}`;\r\n          return {\r\n            text,\r\n            title: `${text} ${target.label ?? \"\"}`\r\n          };\r\n        }\r\n      } else {\r\n        const target = this.actor.items?.get(consumeId);\r\n\r\n        // Return charges\r\n        if (target && consumeType === \"charges\") {\r\n          return this.#getUsesData(target);\r\n        }\r\n\r\n        // Return quantity\r\n        if (target?.system?.quantity) {\r\n          const text = `${consumeAmount > 1 ? `${consumeAmount} ${game.i18n.localize(\"DND5E.of\")} ` : \"\"}${target.system.quantity}`;\r\n          return {\r\n            text,\r\n            title: `${text} ${target.name}`\r\n          };\r\n        }\r\n      }\r\n\r\n      return {};\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Discard slow items\r\n     * @private\r\n     * @param {Map} items The items\r\n     * @returns {Map}     The filtered items\r\n     */\r\n    #discardSlowItems(items) {\r\n      // Return all items if slow actions are allowed\r\n      if (Utils.getSetting(\"showSlowActions\")) return items;\r\n\r\n      // Define slow activation types\r\n      const slowActivationTypes = new Set([\"minute\", \"hour\", \"day\"]);\r\n\r\n      // Filter out slow items and return the result\r\n      return new Map([...items.entries()].filter(([_, item]) => {\r\n        const activationType = item.system?.activation?.type;\r\n        return !slowActivationTypes.has(activationType);\r\n      }));\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get proficiency icon\r\n     * @param {string} level\r\n     * @returns {string}\r\n     */\r\n    #getProficiencyIcon(level) {\r\n      const title = CONFIG.DND5E.proficiencyLevels[level] ?? \"\";\r\n      const icon = PROFICIENCY_LEVEL_ICON[level];\r\n      return (icon) ? `<i class=\"${icon}\" title=\"${title}\"></i>` : \"\";\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get icon for the activation type\r\n     * @private\r\n     * @param {object} activationType The activation type\r\n     * @returns {string}              The icon\r\n     */\r\n    #getActivationTypeIcon(activationType) {\r\n      const title = CONFIG.DND5E.abilityActivationTypes[activationType] ?? \"\";\r\n      const icon = ACTIVATION_TYPE[activationType]?.icon;\r\n      return (icon) ? `<i class=\"${icon}\" title=\"${title}\"></i>` : \"\";\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get icon for concentration type\r\n     * @private\r\n     * @param {object} spell The spell\r\n     * @returns {string}     The icon\r\n     */\r\n    #getConcentrationIcon(spell) {\r\n      if (spell?.type !== \"spell\" || !this.displaySpellInfo || !spell.system?.properties?.has(\"concentration\")) return null;\r\n      const title = game.i18n.localize(\"DND5E.Scroll.RequiresConcentration\");\r\n      const icon = CONCENTRATION_ICON;\r\n      return `<dnd5e-icon src=\"${icon}\" title=\"${title}\">`;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get icon for a prepared spell\r\n     * @private\r\n     * @param {object} spell The spell\r\n     * @returns {string}     The icon\r\n     */\r\n    #getPreparedIcon(spell) {\r\n      if (spell?.type !== \"spell\" || !this.showUnpreparedSpells) return null;\r\n      const level = spell.system.level;\r\n      const preparationMode = spell.system.preparation.mode;\r\n      const prepared = spell.system.preparation.prepared;\r\n      const icon = prepared ? PREPARED_ICON : `${PREPARED_ICON} tah-icon-disabled`;\r\n      const title = preparationMode === \"always\" ? game.i18n.localize(\"DND5E.SpellPrepAlways\") : prepared ? game.i18n.localize(\"DND5E.SpellPrepared\") : game.i18n.localize(\"DND5E.SpellUnprepared\");\r\n\r\n      // Return icon if the preparation mode is 'prepared' or 'always' and the spell is not a cantrip\r\n      return ((preparationMode === \"prepared\" || preparationMode === \"always\") && level !== 0) ? `<i class=\"${icon}\" title=\"${title}\"></i>` : null;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    #getTooltipData(entity) {\r\n      if (this.tooltipsSetting === \"none\") return \"\";\r\n\r\n      const name = entity?.name ?? \"\";\r\n\r\n      if (this.tooltipsSetting === \"nameOnly\") return name;\r\n\r\n      const tooltip = {};\r\n      tooltip.content = `<section class=\"loading\" data-uuid=\"${entity.uuid}\"><i class=\"fas fa-spinner fa-spin-pulse\"></i></section>`;\r\n      tooltip.class = \"dnd5e2 dnd5e-tooltip item-tooltip\";\r\n\r\n      return tooltip;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Get condition tooltip data\r\n     * @param {*} id     The condition id\r\n     * @param {*} name   The condition name\r\n     * @returns {object} The tooltip data\r\n     */\r\n    #getConditionTooltipData(id, name) {\r\n      if (this.tooltipsSetting === \"none\") return \"\";\r\n\r\n      const condition = CONFIG.DND5E.conditionTypes[id];\r\n\r\n      if (this.tooltipsSetting === \"nameOnly\" || !condition?.reference) return name;\r\n\r\n      const tooltip = {};\r\n      tooltip.content = `<section class=\"loading\" data-uuid=\"${condition.reference}\"><i class=\"fas fa-spinner fa-spin-pulse\"></i></section>`;\r\n      tooltip.class = \"dnd5e2 dnd5e-tooltip rule-tooltip\";\r\n\r\n      return tooltip;\r\n    }\r\n  };\r\n});\r\n","import { MODULE } from \"./constants.js\";\r\n\r\n/**\r\n *\r\n * @param updateFunc\r\n */\r\nexport function register(updateFunc) {\r\n  game.settings.register(MODULE.ID, \"abbreviateSkills\", {\r\n    name: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.abbreviateSkills.name\"\r\n    ),\r\n    hint: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.abbreviateSkills.hint\"\r\n    ),\r\n    scope: \"client\",\r\n    config: true,\r\n    type: Boolean,\r\n    default: false,\r\n    onChange: value => {\r\n      updateFunc(value);\r\n    }\r\n  });\r\n\r\n  game.settings.register(MODULE.ID, \"showSlowActions\", {\r\n    name: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.showSlowActions.name\"\r\n    ),\r\n    hint: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.showSlowActions.hint\"\r\n    ),\r\n    scope: \"client\",\r\n    config: true,\r\n    type: Boolean,\r\n    default: true,\r\n    onChange: value => {\r\n      updateFunc(value);\r\n    }\r\n  });\r\n\r\n  game.settings.register(MODULE.ID, \"displaySpellInfo\", {\r\n    name: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.displaySpellInfo.name\"\r\n    ),\r\n    hint: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.displaySpellInfo.hint\"\r\n    ),\r\n    scope: \"client\",\r\n    config: true,\r\n    type: Boolean,\r\n    default: true,\r\n    onChange: value => {\r\n      updateFunc(value);\r\n    }\r\n  });\r\n\r\n  game.settings.register(MODULE.ID, \"showUnchargedItems\", {\r\n    name: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.showUnchargedItems.name\"\r\n    ),\r\n    hint: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.showUnchargedItems.hint\"\r\n    ),\r\n    scope: \"client\",\r\n    config: true,\r\n    type: Boolean,\r\n    default: false,\r\n    onChange: value => {\r\n      updateFunc(value);\r\n    }\r\n  });\r\n\r\n  game.settings.register(MODULE.ID, \"showUnequippedItems\", {\r\n    name: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.showUnequippedItems.name\"\r\n    ),\r\n    hint: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.showUnequippedItems.hint\"\r\n    ),\r\n    scope: \"client\",\r\n    config: true,\r\n    type: Boolean,\r\n    default: false,\r\n    onChange: value => {\r\n      updateFunc(value);\r\n    }\r\n  });\r\n\r\n  game.settings.register(MODULE.ID, \"showUnequippedItemsNpcs\", {\r\n    name: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.showUnequippedItemsNpcs.name\"\r\n    ),\r\n    hint: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.showUnequippedItemsNpcs.hint\"\r\n    ),\r\n    scope: \"client\",\r\n    config: true,\r\n    type: Boolean,\r\n    default: true,\r\n    onChange: value => {\r\n      updateFunc(value);\r\n    }\r\n  });\r\n\r\n  game.settings.register(MODULE.ID, \"showUnpreparedSpells\", {\r\n    name: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.showUnpreparedSpells.name\"\r\n    ),\r\n    hint: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.showUnpreparedSpells.hint\"\r\n    ),\r\n    scope: \"client\",\r\n    config: true,\r\n    type: Boolean,\r\n    default: false,\r\n    onChange: value => {\r\n      updateFunc(value);\r\n    }\r\n  });\r\n\r\n  game.settings.register(MODULE.ID, \"showItemsWithoutActivationCosts\", {\r\n    name: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.showItemsWithoutActivationCosts.name\"\r\n    ),\r\n    hint: game.i18n.localize(\r\n      \"tokenActionHud.dnd5e.settings.showItemsWithoutActivationCosts.hint\"\r\n    ),\r\n    scope: \"client\",\r\n    config: true,\r\n    type: Boolean,\r\n    default: false,\r\n    onChange: value => {\r\n      updateFunc(value);\r\n    }\r\n  });\r\n}\r\n","// System Module Imports\r\nimport { ActionHandler } from \"./action-handler.js\";\r\nimport { MagicItemActionHandlerExtender } from \"./magic-items-extender.js\";\r\nimport { RollHandler as Core } from \"./roll-handler.js\";\r\nimport { DEFAULTS } from \"./defaults.js\";\r\nimport * as systemSettings from \"./settings.js\";\r\n\r\nexport let SystemManager = null;\r\n\r\nHooks.once(\"tokenActionHudCoreApiReady\", async coreModule => {\r\n  SystemManager = class SystemManager extends coreModule.api.SystemManager {\r\n    /** @override */\r\n    getActionHandler() {\r\n      const actionHandler = new ActionHandler();\r\n      if (coreModule.api.Utils.isModuleActive(\"magic-items-2\")\r\n        || coreModule.api.Utils.isModuleActive(\"magicitems\")) {\r\n        actionHandler.addActionHandlerExtender(new MagicItemActionHandlerExtender(actionHandler));\r\n      }\r\n      return actionHandler;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /** @override */\r\n    getAvailableRollHandlers() {\r\n      let coreTitle = \"Core D&D5e\";\r\n\r\n      if (coreModule.api.Utils.isModuleActive(\"midi-qol\")) {\r\n        coreTitle += ` [supports ${coreModule.api.Utils.getModuleTitle(\"midi-qol\")}]`;\r\n      }\r\n\r\n      const choices = { core: coreTitle };\r\n      return choices;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /** @override */\r\n    getRollHandler(rollHandlerId) {\r\n      let rollHandler;\r\n      switch (rollHandlerId) {\r\n        case \"core\":\r\n        default:\r\n          rollHandler = new Core();\r\n          break;\r\n      }\r\n\r\n      return rollHandler;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /** @override */\r\n    registerSettings(onChangeFunction) {\r\n      systemSettings.register(onChangeFunction);\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /** @override */\r\n    async registerDefaults() {\r\n      const defaults = DEFAULTS;\r\n      // If the 'Magic Items' module is active, then add a group for it\r\n      if (game.modules.get(\"magicitems\")?.active || game.modules.get(\"magic-items-2\")?.active) {\r\n        const name = coreModule.api.Utils.i18n(\"tokenActionHud.dnd5e.magicItems\");\r\n        defaults.groups.push(\r\n          {\r\n            id: \"magic-items\",\r\n            name,\r\n            listName: `Group: ${name}`,\r\n            type: \"system\"\r\n          }\r\n        );\r\n        defaults.groups.sort((a, b) => a.id.localeCompare(b.id));\r\n      }\r\n      return defaults;\r\n    }\r\n  };\r\n});\r\n","import { SystemManager } from \"./system-manager.js\";\r\nimport { MODULE, REQUIRED_CORE_MODULE_VERSION } from \"./constants.js\";\r\n\r\nHooks.on(\"tokenActionHudCoreApiReady\", async () => {\r\n  const module = game.modules.get(MODULE.ID);\r\n  module.api = {\r\n    requiredCoreModuleVersion: REQUIRED_CORE_MODULE_VERSION,\r\n    SystemManager\r\n  };\r\n  Hooks.call(\"tokenActionHudSystemReady\", module);\r\n});\r\n"],"names":["MODULE","ID","CORE_MODULE","REQUIRED_CORE_MODULE_VERSION","ACTION_TYPE","ability","check","condition","counter","effect","exhaustion","feature","item","save","skill","spell","utility","ACTIVATION_TYPE","action","group","bonus","icon","crew","day","hour","lair","minute","legendary","reaction","reactiondamage","reactionmanual","special","other","CONCENTRATION_ICON","CUSTOM_DND5E","COUNTERS","character","npc","FEATURE_GROUP_IDS","GROUP","_1stLevelSpells","id","name","spellMode","type","_2ndLevelSpells","_3rdLevelSpells","_4thLevelSpells","_5thLevelSpells","_6thLevelSpells","_7thLevelSpells","_8thLevelSpells","_9thLevelSpells","abilities","actions","activeFeatures","additionalSpells","artificerInfusions","atWillSpells","backgroundFeatures","bonusActions","cantrips","channelDivinity","checks","classFeatures","combat","conditions","consumables","containers","counters","crewActions","defensiveTactics","eldritchInvocations","elementalDisciplines","equipment","equipped","feats","fightingStyles","huntersPrey","innateSpells","kiAbilities","lairActions","legendaryActions","loot","maneuvers","metamagicOptions","monsterFeatures","multiattacks","otherActions","pactBoons","pactSpells","passiveEffects","passiveFeatures","psionicPowers","raceFeatures","reactions","rests","runes","saves","skills","superiorHuntersDefense","temporaryEffects","token","tools","unequipped","weapons","PREPARED_ICON","PROFICIENCY_LEVEL_ICON","RARITY","common","uncommon","rare","veryRare","artifact","RITUAL_ICON","SPELL_GROUP_IDS","DEFAULTS","Hooks","once","async","groups","Object","values","forEach","coreModule","api","Utils","i18n","listName","groupsArray","layout","nestId","RollHandler","handleActionClick","event","actionType","actionId","this","system","actor","handleAction","getControlledTokens","rollAbility","rollAbilityTest","rollAbilitySave","toggleCondition","modifyCounter","toggleEffect","modifyExhaustion","isRenderItem","renderItem","useItem","rollMagicItem","rollSkill","performUtilityAction","counterKey","rollDeathSave","modifyInspiration","modifyCustomCounter","currentExhaustion","attributes","newExhaustion","isRightClick","update","inspiration","counterType","value","getFlag","setFlag","key","currentValue","newValue","adjustValue","increment","Math","max","success","failure","isCtrl","itemId","effectId","magicItemActor","MagicItems","roll","callAll","getItem","needsRecharge","rollRecharge","use","legacy","uses","period","game","current","tokenId","nextTurn","rollInitiative","longRest","shortRest","rollInitiativeDialog","statusEffect","CONFIG","statusEffects","find","isConvenient","flags","startsWith","dfreds","effectName","label","effectInterface","overlay","findCondition","findEffect","disabled","delete","toggleStatusEffect","effects","statuses","every","status","allApplicableEffects","transfer","handleActionHover","includes","isHover","call","MagicItemActionHandlerExtender","ActionHandlerExtender","constructor","actionHandler","super","extendActionHandler","magicItems","items","length","parentGroupData","magicItem","attuned","_isItemAttuned","_isItemEquipped","groupData","info1","charges","addGroup","ownedEntries","map","entry","img","getImage","consumption","info2","baseLevel","encodedValue","selected","addActions","attunment","DND5E","attunementTypes","REQUIRED","capitalize","replace","text","charAt","toUpperCase","substring","toLowerCase","getSetting","defaultValue","settings","get","Logger","debug","setSetting","set","ActionHandler","register","updateFunc","localize","hint","scope","config","Boolean","default","onChange","featureActions","inventoryActions","spellActions","buildSystemActions","groupIds","actors","getValidActors","tokens","getValidTokens","sortItemsByName","discardSlowItems","abbreviateSkills","displaySpellInfo","showItemsWithoutActivationCosts","showUnchargedItems","showUnequippedItems","showUnpreparedSpells","activationgroupIds","inventorygroupIds","buildCharacterActions","buildVehicleActions","buildMultipleTokenActions","Promise","all","buildConditions","buildEffects","buildFeatures","buildInventory","buildSpells","buildAbilities","buildCombat","buildCounters","buildExhaustion","buildRests","buildSkills","buildUtility","groupId","entries","filter","abilityId","abilitySaveValue","mod","icon1","getProficiencyIcon","proficient","getModifier","title","getListName","buildActivations","data","actionData","activationItems","Map","activationType","activities","contents","activation","has","groupDataClone","defaultSelected","parentgroupData","addGroupInfo","buildActions","combatType","initiative","endTurn","tokenIds","combatants","combatant","getInfo1","class","cssClass","hasCondition","some","tooltip","getConditionTooltipData","isModuleActive","keys","_","visible","active","death","size","statusEffectIds","Set","_id","isSuppressed","parent","identified","user","isGM","isTemporary","featuresMap","featureType","background","monster","race","classFeatureType","artificerInfusion","defensiveTactic","eldritchInvocation","elementalDiscipline","fightingStyle","ki","maneuver","metamagic","multiattack","pact","psionicPower","rune","subType","subtype","inventoryMap","quantity","isActiveItem","isUsableItem","isEquippedItem","total","error","spells","spellsMap","isUsableSpell","linkedActivity","displayInSpellbook","preparation","mode","level","systemSpells","reverse","spellSlotsMap","spellSlotAvailable","pactSlotAvailable","pactSlot","hasValue","hasMax","hasLevel","slotAvailable","slotsAvailable","spellSlotModes","levelInfo","slots","info","utilityTypes","deathSave","hp","utilityType","options","getAction","entity","hasOwn","getItemInfo","getTooltipData","getActivationTypeIcon","icon2","getPreparedIcon","icon3","getConcentrationIcon","info3","activationTypes","activityActivationTypes","spellPreparationModes","preparationMode","prepared","actionName","getSpellInfo","getQuantityData","getUsesData","getConsumeData","components","properties","componentsArray","vocal","somatic","material","ritual","push","join","allowedTypes","per","recovery","limitedUsePeriods","perPeriod","spent","firstActivity","firstTarget","targets","consumeId","target","consumeType","consumeAmount","parentId","substr","lastIndexOf","foundry","utils","getProperty","slowActivationTypes","proficiencyLevels","abilityActivationTypes","tooltipsSetting","content","uuid","conditionTypes","reference","SystemManager","getActionHandler","addActionHandlerExtender","getAvailableRollHandlers","coreTitle","getModuleTitle","core","getRollHandler","rollHandlerId","rollHandler","Core","registerSettings","onChangeFunction","systemSettings.register","registerDefaults","defaults","modules","sort","a","b","localeCompare","on","module","requiredCoreModuleVersion"],"mappings":"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"}